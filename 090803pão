const express = require('express');
const { Pool } = require('pg');

const app = express();
const port = process.env.PORT || 3000;

// Conectando ao banco de dados Neon (substitua pela sua conexão)
const pool = new Pool({
  connectionString: 'postgresql://neondb_owner:npg_6wyRpW5vomXt@ep-aged-moon-a8baez8h-pooler.eastus2.azure.neon.tech/neondb?sslmode=require',
  ssl: { rejectUnauthorized: false }  // Necessário para Neon
});

app.use(express.json());

// Criando a tabela de ranks caso não exista
pool.query(`
  CREATE TABLE IF NOT EXISTS blackmask_ranks (
    id SERIAL PRIMARY KEY,
    usuario VARCHAR(255) UNIQUE NOT NULL,
    pontos INT DEFAULT 0,
    rank VARCHAR(255) DEFAULT 'Recruta Sombrio'
  );
`, (err) => {
  if (err) console.error('Erro ao criar tabela:', err);
  else console.log('Tabela verificada com sucesso.');
});

// Endpoint para buscar o rank de um usuário
app.get('/rank/:usuario', async (req, res) => {
  const { usuario } = req.params;
  const result = await pool.query('SELECT * FROM blackmask_ranks WHERE usuario = $1', [usuario]);
  
  if (result.rows.length > 0) {
    res.json(result.rows[0]);
  } else {
    res.status(404).json({ error: 'Usuário não encontrado' });
  }
});

// Endpoint para atualizar os pontos
app.post('/rank/update', async (req, res) => {
  const { usuario, pontos } = req.body;
  
  await pool.query(`
    INSERT INTO blackmask_ranks (usuario, pontos) 
    VALUES ($1, $2) 
    ON CONFLICT (usuario) DO UPDATE SET pontos = blackmask_ranks.pontos + $2
  `, [usuario, pontos]);
  
  res.json({ message: 'Pontos atualizados' });
});

app.listen(port, () => {
  console.log(`Servidor rodando na porta ${port}`);
});
